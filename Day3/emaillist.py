# Simple program to access emails from Gmail API

import httplib2
import sys

from oauth2client import tools
from oauth2client.file import Storage
from oauth2client.client import AccessTokenRefreshError
from oauth2client.client import OAuth2WebServerFlow
from apiclient import errors
from oauth2client.contrib import gce

# Authorization
# Requested from commandline

client_id = sys.argv[1]
client_secret = sys.argv[2]

# Scope is set to read-only

scope = 'https://www.googleapis.com/auth/gmail.readonly'

def main():

	storage = Storage('credentials.dat')
	credentials = storage.get()

	if credentials is None or credentials.invalid:
		credentials = tools.run_flow(flow, storage, tools.argparser.parse_args())

	http = httplib2.Http()
	http = credentials.authorize(http)

credentials = gce.AppAssertionCredentials(scope='https://www.googleapis.com/auth/gmail.readonly')
http = credentials.authorize(httplib2.Http())


def ListMessagesMatchingQuery(service, user_id, query=''):

	service = build('gmail','v1', http=http)
	try:
		response = service.users().messages().list(userId=user_id,q=query).execute()

		messages = []
		if 'messages' in response:
			messages.extend(response['nextPageToken'])

		while 'nextPageToken' in response:
			page_token = response['nextPageToken']
			response = service.users().messages().list(userId=user_id, q=query,pageToken=page_token).execute()
			messages.extend(response['messages'])

		return messages
	except errors.HttpError, error:
		print 'An error occured: %s' % error

def ListMessagesWithLabels(service, user_id, label_ids=[]):
	try:
		response = service.users().messages().list(userId=user_id, labelIds=label_ids).execute()
		messages = []
		if 'messages' in response:
			messages.extend(response['messages'])

		while 'nextPageToken' in response:
			page_token = response['nextPageToken']
			response = service.users().messages().list(userId=user_id, labelIds=label_ids, pageToken=page_token).execute()
			messages.extends(response['messages'])

		return messages
	except error.Httperror, error:
		print 'An error occured: %s' % error

















































































































































































































































































































































































































































































































































































































































